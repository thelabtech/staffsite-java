/* Generated by Together */

package org.alt60m.util;
import java.util.*;
import java.sql.ResultSet;
import java.sql.SQLException;

public class TextUtils {

   static public String byteToHex(byte b) {
      // Returns hex String representation of byte b
      char hexDigit[] = {
         '0', '1', '2', '3', '4', '5', '6', '7',
         '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
      };
      char[] array = { hexDigit[(b >> 4) & 0x0f], hexDigit[b & 0x0f] };
      return new String(array);
   }

    public static String translate(String[] from, String[] to, String word)
	{
		for(int i =0; i< from.length;i++)
			if (word.equalsIgnoreCase(from[i]))
				return to[i];
		
		// Nothing matched - return unchanged
		return word;
	}

    public static String listToCommaDelimitedQuotedString(List list) {
		return listToCommaDelimitedQuotedString(list, "'");
    }

    public static String listToCommaDelimitedQuotedStringCastorAlternative(List list) {
		return listToCommaDelimitedQuotedString(list, "\"");
    }

	public static String listToCommaDelimitedQuotedString(List list, String quoteChar) {
		String result= "";
		for(Iterator i = list.iterator();i.hasNext();) {
			result += quoteChar + i.next() + quoteChar;
			if(i.hasNext()) { result += ", "; }
		}
		return result;
	}
	
	public static String listToCommaDelimitedQuotedString(ResultSet rs, String quoteChar) {
		try {
			String result = "";
			while (rs.next()) {
				result += quoteChar + rs.getString(1) + quoteChar;
				if (!rs.isLast()) {
					result += ", ";
				}
			}
			return result;
		} catch (SQLException sqle) {
			sqle.printStackTrace();
			return "";
		}
	}

    public static String formatDateToSQL(Date date) {
        java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyy-MM-dd");
		return formatter.format(date);
    }
    
	public static String formatApostrophe(String s) {
		s = s.replaceAll("\'","\'\'");
		return s;
	}

}
