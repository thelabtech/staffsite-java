/* Generated by Together */

package org.alt60m.fsk.servlet;

//import org.alt60m.persistence.castor.ObjectBroker;
//import org.alt60m.persistence.castor.ObjectAdaptor;
//import org.alt60m.persistence.castor.ObjectNotFoundException;
//import org.exolab.castor.jdo.OQLQuery;
import org.alt60m.fsk.model.dbio.*;
//import org.alt60m.fsk.logic.*;
import org.alt60m.util.ObjectHashUtil;
import org.alt60m.ministry.model.dbio.Staff;
//import org.alt60m.fsk.FskBrokerException;
//import org.alt60m.ministry.MinistryBrokerException;

import java.util.*;

public class FskInfo {
	
	public static Collection getAllAllocations() {
		return ObjectHashUtil.list(getAllAllocationsObj());
	}

	public static Collection getAllAllocationsDistSum() {
		return ObjectHashUtil.list(getAllAllocationsDistSumObj());
	}

	public static Collection getAllAllocationsOrderSum() {
		return ObjectHashUtil.list(getAllAllocationsOrderSumObj());
	}

	public static Collection getAllAllocationsObj() { 
		Allocation a = new Allocation();
		Collection result = a.selectList("order by lastName, firstName");
        
        return result;
    }

	public static Collection getAllAllocationsDistSumObj() { 
		Allocation a = new AllocationDistSummary();
		Collection result = a.selectList("order by lastName, firstName, AllocationID");
        
        return result;
    }
	
	public static Collection getAllAllocationsOrderSumObj() { 
		Allocation a = new AllocationOrderSummary();
		Collection result = a.selectList("order by lastName, firstName, AllocationID");
        
        return result;
    }

	public static Collection getNationalAllocations() {
		return ObjectHashUtil.list(getNationalAllocationsObj());
	}

	public static Collection getNationalAllocationsDistSum() {
		return ObjectHashUtil.list(getNationalAllocationsDistSumObj());
	}

	public static Collection getNationalAllocationsOrderSum() {
		return ObjectHashUtil.list(getNationalAllocationsOrderSumObj());
	}

	public static Collection getNationalAllocationsObj() { //throws FskBrokerException {
		Allocation a = new Allocation();
		Collection result = a.selectList("natlDonation > '1' order by lastName, firstName");
        
		return result;
    }

	public static Collection getNationalAllocationsDistSumObj() { //throws FskBrokerException {
		Allocation a = new AllocationDistSummary();
		Collection result = a.selectList("natlDonation > '1' order by lastName, firstName, AllocationID");
        
		return result;
    }

	public static Collection getNationalAllocationsOrderSumObj() { //throws FskBrokerException {
		Allocation a = new AllocationOrderSummary();
		Collection result = a.selectList("natlDonation > '1' order by lastName, firstName, AllocationID");
        
		return result;
    }

	public static Collection getRegionalAllocations(String region) {
		return ObjectHashUtil.list(getRegionalAllocationsObj(region));
	}

	public static Collection getRegionalAllocationsDistSum(String region) {
		return ObjectHashUtil.list(getRegionalAllocationsDistSumObj(region));
	}
	
	public static Collection getRegionalAllocationsOrderSum(String region) {
		return ObjectHashUtil.list(getRegionalAllocationsOrderSumObj(region));
	}

	public static Collection getRegionalAllocationsObj(String region) { // throws FskBrokerException {
		Allocation a = new Allocation();
		Collection result = a.selectList("region = '" + region + "' order by lastName, firstName");
        
		return result;
     }

	public static Collection getRegionalAllocationsDistSumObj(String region) { // throws FskBrokerException {
		Allocation a = new AllocationDistSummary();
		Collection result = a.selectList("region = '" + region + "' order by lastName, firstName, AllocationID");
        
		return result;
     }

	public static Collection getRegionalAllocationsOrderSumObj(String region) { // throws FskBrokerException {
		Allocation a = new AllocationOrderSummary();
		Collection result = a.selectList("region = '" + region + "' order by lastName, firstName, AllocationID");
        
		return result;
     }

	public static Collection getAllocations(int id) {
		return ObjectHashUtil.list(getAllocationsObj(id));
	}

	public static Collection getAllocationsDistSum(int id) {
		return ObjectHashUtil.list(getAllocationsDistSumObj(id));
	}

	public static Collection getAllocationsOrderSum(int id) {
		return ObjectHashUtil.list(getAllocationsOrderSumObj(id));
	}

	public static Collection getAllocationsObj(int id) { //throws FskBrokerException {
		Allocation a = new Allocation();
		Collection result = a.selectList("allocationID = '" + id + "'");
       
		return result;
     }

	public static Collection getAllocationsDistSumObj(int id) { //throws FskBrokerException {
		Allocation a = new AllocationDistSummary();
		Collection result = a.selectList("allocationID = '" + id + "'");
       
		return result;
     }

	public static Collection getAllocationsOrderSumObj(int id) { //throws FskBrokerException {
		Allocation a = new AllocationOrderSummary();
		Collection result = a.selectList("allocationID = '" + id + "'");
       
		return result;
     }

	public static Collection listAllocationsByAccountNo(String acctNo) {
		return ObjectHashUtil.list(listAllocationsByAccountNoObj(acctNo));
	}

	public static Collection listAllocationsByAccountNoDistSum(String acctNo) {
		return ObjectHashUtil.list(listAllocationsByAccountNoDistSumObj(acctNo));
	}

	public static Collection listAllocationsByAccountNoOrderSum(String acctNo) {
		return ObjectHashUtil.list(listAllocationsByAccountNoOrderSumObj(acctNo));
	}

	public static Collection listAllocationsByAccountNoObj(String acctNo) { //throws FskBrokerException {
		Allocation a = new Allocation();
		Collection result = a.selectList("accountNo = '" + acctNo + "'");
       
		return result;
    }

	public static Collection listAllocationsByAccountNoDistSumObj(String acctNo) { //throws FskBrokerException {
		Allocation a = new AllocationDistSummary();
		Collection result = a.selectList("accountNo = '" + acctNo + "'");
       
		return result;
    }

	public static Collection listAllocationsByAccountNoOrderSumObj(String acctNo) { //throws FskBrokerException {
		Allocation a = new AllocationOrderSummary();
		Collection result = a.selectList("accountNo = '" + acctNo + "'");
       
		return result;
    }

	public static Collection listAllocationByAcctNoAndRegion(String acctNo, String region) {
		return ObjectHashUtil.list(listAllocationByAcctNoAndRegionObj(acctNo, region));
	}

	public static Collection listAllocationByAcctNoAndRegionObj(String acctNo, String region) { //throws FskBrokerException {
		Allocation a = new Allocation();
		Collection result = a.selectList("accountNo = '" + acctNo + "' AND region = '" + region + "'");
       
		return result;
    }

	public static Collection getFskOrderList(int allocationID) {
		return ObjectHashUtil.list(getFskOrderListObj(allocationID));
	}

	public static Collection getFskOrderListObj(int allocationID) { //throws FskBrokerException {
		FskOrder f = new FskOrder();
		Collection result = f.selectList("fk_allocation = '" + allocationID + "'");
		
		return result;
	}

	public static Collection getDistributionList(int allocationID) {
		return ObjectHashUtil.list(getDistributionListObj(allocationID));
	}

	public static Collection getDistributionListObj(int allocationID) { // throws FskBrokerException {
		Distribution d = new Distribution();
		Collection result = d.selectList("fk_Allocation = '" + allocationID + "'");
		
		return result;
	}

	public static Collection listStaffByRegion(String region) {
		return ObjectHashUtil.list(listStaffByRegionObj(region));
	}

    public static Collection listStaffByRegionObj(String region) { //throws MinistryBrokerException {
		Staff s = new Staff();
		Collection result = s.selectList("region = '" + region + "' AND removedFromPeopleSoft = 'N' order by lastname, firstname");
		
		return result;
    }

	public static Collection listStaffByLastName(String lastName) {
		return ObjectHashUtil.list(listStaffByLastNameObj(lastName));
	}

    public static Collection listStaffByLastNameObj(String lastName) { //throws MinistryBrokerException {
    	lastName = lastName.replaceAll("'", "''");
		Staff s = new Staff();
		Collection result = s.selectList("lastname LIKE '" + lastName + "%' AND removedFromPeopleSoft = 'N' order by lastname, firstname");
		
		return result;
    }
}
